/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package minisoccerfieldmanagement.form;

import com.formdev.flatlaf.FlatClientProperties;
import com.formdev.flatlaf.extras.FlatSVGIcon;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.MouseEvent;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DateFormatter;
import javax.swing.text.DefaultFormatter;
import minisoccerfieldmanagement.model.Booking;
import minisoccerfieldmanagement.model.Customer;
import minisoccerfieldmanagement.model.MemberShip;
import minisoccerfieldmanagement.model.Field;
import minisoccerfieldmanagement.model.ModelDate;
import minisoccerfieldmanagement.model.User;
import minisoccerfieldmanagement.service.BookingServiceImpl;
import minisoccerfieldmanagement.service.CustomerServiceImpl;
import minisoccerfieldmanagement.service.FieldServiceImpl;
import minisoccerfieldmanagement.service.IBookingService;
import minisoccerfieldmanagement.service.ICustomerService;
import minisoccerfieldmanagement.service.IFieldService;
import minisoccerfieldmanagement.service.IMemberShipService;
import minisoccerfieldmanagement.service.IPriceListService;
import minisoccerfieldmanagement.service.MemberShipServiceImpl;
import minisoccerfieldmanagement.service.PriceListServiceImpl;
import minisoccerfieldmanagement.tabbed.TabbedForm;
import minisoccerfieldmanagement.util.CalendarSelectedListener;
import minisoccerfieldmanagement.util.ColorGenerator;
import minisoccerfieldmanagement.util.StaticStrings;
import minisoccerfieldmanagement.util.Utils;
import raven.alerts.MessageAlerts;
import raven.toast.Notifications;
import raven.datetime.component.time.TimeEvent;
import raven.datetime.component.time.TimePicker;
import raven.datetime.component.time.TimeSelectionListener;
import raven.popup.component.PopupCallbackAction;
import raven.popup.component.PopupController;

/**
 *
 * @author trank
 */
public class StaffBooking extends TabbedForm {

    List<LocalTime> timeSlots;
    List<Field> fields;
    IFieldService fieldService;
    String[] columnNames;
    Customer customer;
    ICustomerService customerService;
    User user;
    Date dateSelected;
    DefaultComboBoxModel fieldModels;
    IPriceListService priceListService;
    IBookingService bookingService;
    List<Booking> listBooking;
    Object[][] data;
    Booking[][] booked;
    
    List<Field> blockTime;
    
    
    public StaffBooking() {
        initComponents();
        loadData();
        setScheduler((Date)tfDate.getValue());
        setEvents();
        user = new User();
        user.setId(1);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        crazyPanel3 = new raven.crazypanel.CrazyPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tfStartTime = new javax.swing.JFormattedTextField();
        tfEndTime = new javax.swing.JFormattedTextField();
        cbxTypeField = new javax.swing.JComboBox<>();
        tfDate = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        tfName = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        tfPrice = new javax.swing.JTextField();
        cbxStatus = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        crazyPanel6 = new raven.crazypanel.CrazyPanel();
        btnSave = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnCheckin = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        taNote = new javax.swing.JTextArea();
        cbxFields1 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        lblDuration = new javax.swing.JLabel();
        lblId = new javax.swing.JLabel();
        crazyPanel5 = new raven.crazypanel.CrazyPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblScheduler = new javax.swing.JTable();
        crazyPanel4 = new raven.crazypanel.CrazyPanel();
        calendarSchedule = new minisoccerfieldmanagement.util.Calendar();

        setMaximumSize(new java.awt.Dimension(1188, 696));
        setMinimumSize(new java.awt.Dimension(1188, 696));
        setPreferredSize(new java.awt.Dimension(1188, 696));

        crazyPanel3.setFlatLafStyleComponent(new raven.crazypanel.FlatLafStyleComponent(
            "background:$Table.background;[light]border:0,0,0,0,shade(@background,5%),,20;[dark]border:0,0,0,0,tint(@background,5%),,20",
            new String[]{
                ""
            }
        ));
        crazyPanel3.setMigLayoutConstraints(new raven.crazypanel.MigLayoutConstraints(
            "",
            "",
            "",
            null
        ));
        crazyPanel3.setName(""); // NOI18N
        crazyPanel3.setPreferredSize(new java.awt.Dimension(900, 280));

        jLabel1.setText("From");

        jLabel2.setText("To");

        tfStartTime.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getTimeInstance(java.text.DateFormat.SHORT))));
        tfStartTime.setEnabled(false);

        tfEndTime.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getTimeInstance(java.text.DateFormat.SHORT))));
        tfEndTime.setEnabled(false);

        cbxTypeField.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "5 a side", "7 a side" }));
        cbxTypeField.setEnabled(false);
        cbxTypeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxTypeFieldActionPerformed(evt);
            }
        });

        tfDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy"))));
        tfDate.setEnabled(false);

        jLabel4.setText("Date");

        jLabel5.setText("Phone");

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        jLabel6.setText("Type");

        tfName.setEnabled(false);

        jLabel7.setText("Price");

        jLabel8.setText("Name");

        tfPrice.setEnabled(false);
        tfPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfPriceActionPerformed(evt);
            }
        });

        cbxStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Active", "Canceled", "Completed" }));
        cbxStatus.setEnabled(false);
        cbxStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxStatusActionPerformed(evt);
            }
        });

        jLabel9.setText("Status");

        jLabel10.setText("Note");

        crazyPanel6.setFlatLafStyleComponent(new raven.crazypanel.FlatLafStyleComponent(
            "background:$Table.background;[light]border:0,0,0,0,shade(@background,5%),,20;[dark]border:0,0,0,0,tint(@background,5%),,20",
            null
        ));

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnCheckin.setText("Checkin / Match");
        btnCheckin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckinActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout crazyPanel6Layout = new javax.swing.GroupLayout(crazyPanel6);
        crazyPanel6.setLayout(crazyPanel6Layout);
        crazyPanel6Layout.setHorizontalGroup(
            crazyPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(crazyPanel6Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(btnSave)
                .addGap(7, 7, 7)
                .addComponent(btnDelete)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(crazyPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnCheckin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        crazyPanel6Layout.setVerticalGroup(
            crazyPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(crazyPanel6Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(crazyPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSave)
                    .addComponent(btnDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCheckin)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        taNote.setColumns(20);
        taNote.setRows(5);
        jScrollPane2.setViewportView(taNote);

        cbxFields1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Field" }));
        cbxFields1.setEnabled(false);
        cbxFields1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxFields1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Field");

        lblDuration.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblDuration.setForeground(new java.awt.Color(195, 204, 90));
        lblDuration.setText("Duration:");

        lblId.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblId.setForeground(new java.awt.Color(195, 204, 90));

        javax.swing.GroupLayout crazyPanel3Layout = new javax.swing.GroupLayout(crazyPanel3);
        crazyPanel3.setLayout(crazyPanel3Layout);
        crazyPanel3Layout.setHorizontalGroup(
            crazyPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(crazyPanel3Layout.createSequentialGroup()
                .addGroup(crazyPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(crazyPanel3Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(crazyPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(crazyPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(6, 6, 6)
                        .addGroup(crazyPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(crazyPanel3Layout.createSequentialGroup()
                                .addGroup(crazyPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(cbxTypeField, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(crazyPanel3Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbxStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(crazyPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(crazyPanel3Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(crazyPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, crazyPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(crazyPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(crazyPanel3Layout.createSequentialGroup()
                        .addComponent(tfDate, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(tfStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(tfEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(284, 284, 284))
                    .addGroup(crazyPanel3Layout.createSequentialGroup()
                        .addGroup(crazyPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                            .addComponent(cbxFields1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(crazyPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(crazyPanel3Layout.createSequentialGroup()
                                .addGap(81, 81, 81)
                                .addComponent(lblDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(crazyPanel3Layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addGroup(crazyPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblId, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(crazyPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        crazyPanel3Layout.setVerticalGroup(
            crazyPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, crazyPanel3Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(crazyPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel3)
                    .addComponent(cbxFields1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblId, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(crazyPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(crazyPanel3Layout.createSequentialGroup()
                        .addGroup(crazyPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(crazyPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(crazyPanel3Layout.createSequentialGroup()
                                .addComponent(crazyPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(crazyPanel3Layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addGroup(crazyPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(crazyPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cbxStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9))
                                .addGap(34, 34, 34))))
                    .addGroup(crazyPanel3Layout.createSequentialGroup()
                        .addGroup(crazyPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblDuration)
                            .addGroup(crazyPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel10)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)))
                .addGroup(crazyPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(tfEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(cbxTypeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(25, 25, 25))
        );

        crazyPanel5.setFlatLafStyleComponent(new raven.crazypanel.FlatLafStyleComponent(
            "background:$Table.background;[light]border:0,0,0,0,shade(@background,5%),,20;[dark]border:0,0,0,0,tint(@background,5%),,20",
            null
        ));
        crazyPanel5.setMigLayoutConstraints(new raven.crazypanel.MigLayoutConstraints(
            "",
            "",
            "",
            null
        ));
        crazyPanel5.setName(""); // NOI18N
        crazyPanel5.setLayout(new java.awt.BorderLayout());

        tblScheduler.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1"
            }
        ));
        tblScheduler.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblScheduler.setAutoscrolls(false);
        jScrollPane1.setViewportView(tblScheduler);

        crazyPanel5.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        crazyPanel4.setFlatLafStyleComponent(new raven.crazypanel.FlatLafStyleComponent(
            "background:$Table.background;[light]border:0,0,0,0,shade(@background,5%),,20;[dark]border:0,0,0,0,tint(@background,5%),,20",
            null
        ));
        crazyPanel4.setMigLayoutConstraints(new raven.crazypanel.MigLayoutConstraints(
            "",
            "",
            "",
            null
        ));
        crazyPanel4.setName(""); // NOI18N
        crazyPanel4.setLayout(new java.awt.BorderLayout());
        crazyPanel4.add(calendarSchedule, java.awt.BorderLayout.PAGE_START);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(crazyPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 1150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(crazyPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(crazyPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 885, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(crazyPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(crazyPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(crazyPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cbxStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxStatusActionPerformed

    private void cbxTypeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxTypeFieldActionPerformed
        
    }//GEN-LAST:event_cbxTypeFieldActionPerformed

    private void cbxFields1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxFields1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxFields1ActionPerformed

    private void tfPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfPriceActionPerformed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        String text = txtSearch.getText();
        if ((!text.matches("\\d+")) && (!text.isEmpty())) {
            MessageAlerts.getInstance().showMessage("Number Only", "You can only enter number", MessageAlerts.MessageType.WARNING, MessageAlerts.CLOSED_OPTION, new PopupCallbackAction() {
                                @Override
                                public void action(PopupController pc, int i) {
                                    if (i == MessageAlerts.OK_OPTION )
                                    {
                                        txtSearch.requestFocus();
                                    }
                                }
                            });
   
                txtSearch.setText(text.substring(0, text.length()-1));
            return;
            
        }
        if (text.length() == 10) {
            customer = customerService.findByPhoneNumber(text);
            if (customer.getName() == null)
            {
             
                MessageAlerts.getInstance().showMessage("Not found", "No customer found with phone number: " + text , MessageAlerts.MessageType.WARNING, MessageAlerts.CLOSED_OPTION, new PopupCallbackAction() {
                                @Override
                                public void action(PopupController pc, int i) {
                                    if (i == MessageAlerts.OK_OPTION )
                                    {
                                        txtSearch.requestFocus();
                                    }
                                }
                            });
            }
      
            tfName.setText(customer.getName());
            
                   
        }
        else if (text.length()> 10)
        {
            MessageAlerts.getInstance().showMessage("Only 10 numbers", "Exceeded number of characters", MessageAlerts.MessageType.WARNING, MessageAlerts.CLOSED_OPTION, new PopupCallbackAction() {
                                @Override
                                public void action(PopupController pc, int i) {
                                    if (i == MessageAlerts.OK_OPTION )
                                    {
                                        txtSearch.requestFocus();
                                    }
                                }
                            });
   
                txtSearch.setText(text.substring(0, text.length()-1));
            return;
        }
                
    }//GEN-LAST:event_txtSearchKeyReleased

    private void btnCheckinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckinActionPerformed
        clear();
    }//GEN-LAST:event_btnCheckinActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        save();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        delete();
    }//GEN-LAST:event_btnDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCheckin;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private minisoccerfieldmanagement.util.Calendar calendarSchedule;
    private javax.swing.JComboBox<String> cbxFields1;
    private javax.swing.JComboBox<String> cbxStatus;
    private javax.swing.JComboBox<String> cbxTypeField;
    private raven.crazypanel.CrazyPanel crazyPanel3;
    private raven.crazypanel.CrazyPanel crazyPanel4;
    private raven.crazypanel.CrazyPanel crazyPanel5;
    private raven.crazypanel.CrazyPanel crazyPanel6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblDuration;
    private javax.swing.JLabel lblId;
    private javax.swing.JTextArea taNote;
    private javax.swing.JTable tblScheduler;
    private javax.swing.JFormattedTextField tfDate;
    private javax.swing.JFormattedTextField tfEndTime;
    private javax.swing.JTextField tfName;
    private javax.swing.JTextField tfPrice;
    private javax.swing.JFormattedTextField tfStartTime;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    private void setScheduler(Date date) {
        Date utilDate = new Date(); // Replace with your java.util.Date
        Timestamp sqlTimestamp = new Timestamp(utilDate.getTime());

        int numberOfCol = fields.size() + 1;
        // Create data
        booked = new Booking[timeSlots.size()][numberOfCol];
        data = new Object[timeSlots.size()][numberOfCol];
        for (int i = 0; i < timeSlots.size(); i++) {
            data[i][0] = timeSlots.get(i).toString();
            
        }
         
        for (Booking booking : listBooking) {
            long minutesDiff = Math.abs(booking.getTimeEnd().getTime() - booking.getTimeStart().getTime()) / (1000 * 60); // Chia cho 1000 để chuyển milliseconds thành giây, và chia cho 60 để chuyển giây thành phút
            long duration = minutesDiff / 30;
            Customer cus = customerService.findById(booking.getCustomerId());
            
            Field fieldTmp = fieldService.findById(booking.getFieldId());
            if (fieldTmp != null)
            {
                List<Field> parentField = new ArrayList<>();
                if (fieldTmp.getType().equals(StaticStrings.FIELD_STYLE_5_A_SIZE))
                {
                    parentField = fieldService.findParent(fieldTmp.getId());
                }
                else if (fieldTmp.getType().equals(StaticStrings.FIELD_STYLE_7_A_SIZE))
                {
                    
                    List<Integer> listId = new ArrayList<>();
                    
                    listId.add(fieldTmp.getCombineField1());
                    listId.add(fieldTmp.getCombineField2());
                    listId.add(fieldTmp.getCombineField3());
                    for (int i = 0; i < 3; i++)
                    {
                        Field tmp = fieldService.findById(listId.get(i));
                        if (tmp != null)
                        {
                            parentField.add(tmp);
                        }
                        
                    }
                    
                }
                if ( !parentField.isEmpty())
                {
                    for (Field fp : parentField) {
                         for (int i = 0; i < duration; i++)
                        {
                            String dataString = "X";
                            LocalTime st = Utils.convertTimestampToLocalTime(booking.getTimeStart());
                            data[getRow(st) + i][getCol(fp.getId())] = dataString;
                            booked[getRow(st) + i][getCol(fp.getId())] = null;
                        }
                    }
                }
            }
            for (int i = 0; i < duration; i++)
            {
                String dataString = "";
                LocalTime st = Utils.convertTimestampToLocalTime(booking.getTimeStart());
                switch (i) {
                    case 0 -> dataString += "ID: " + booking.getId();
                    case 1 -> dataString += "P: "+ cus.getPhoneNumber();
                    case 2 -> dataString += "Cus: "+ cus.getName();
                    default -> {
                    }
                }
                data[getRow(st) + i][getCol(booking.getFieldId())] = dataString;
                booked[getRow(st) + i][getCol(booking.getFieldId())] = booking;
            }
        }


        DefaultTableModel model = new DefaultTableModel(data, columnNames);
        tblScheduler.setModel(model);
        tblScheduler.setRowHeight(30);
        tblScheduler.setColumnSelectionAllowed(false);
        tblScheduler.setRowSelectionAllowed(false);
        tblScheduler.setCellSelectionEnabled(true);
        
       
        for (int index = 1; index <= fields.size(); index ++) {
            Color color = ColorGenerator.getRandomColor();
            tblScheduler.getColumnModel().getColumn(index).setCellRenderer(new DefaultTableCellRenderer() {
                
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                 if (isSelected) {
                    setBackground(table.getSelectionBackground());
                    setForeground(table.getSelectionForeground());
                } 
                else
                if (value != null) {
                    setBackground(color); //new Color(3,169,244)
                    if (value.equals("X"))
                    {
                        setBackground(Color.DARK_GRAY);
                    }
                }
                else {
                    setBackground(table.getBackground());
                    if (row % 2 != 0) { // Check if the row represents a whole hour
                        setBorder(BorderFactory.createMatteBorder(0, 0, 1, 1, Color.lightGray)); // Add a border at the bottom of the cell
                    } else {
                        setBorder(noFocusBorder); // No border for half-hour rows
                        setBorder(BorderFactory.createMatteBorder(0, 0, 0, 1, Color.lightGray)); // Add a border at the bottom of the cell
                    }
                    
               }
                
                return this;
            }
            });
        }

    }


    private void setEvents() {
        calendarSchedule.addCalendarSelectedListener(new CalendarSelectedListener() {
            @Override
            public void selected(MouseEvent evt, ModelDate date) {
                dateSelected = date.toDate();
                tfDate.setValue(dateSelected);
                listBooking = bookingService.findByDateAndFieldType(Utils.convertUtilDateToSqlDate(dateSelected), "");
                setScheduler(Utils.convertUtilDateToSqlDate(dateSelected));
            }
        });
        
        timePicker1.addTimeSelectionListener(new TimeSelectionListener() {
            @Override
            public void timeSelected(TimeEvent te) {
                if (timePicker1.isTimeSelected()) {
                    DateTimeFormatter df = DateTimeFormatter.ofPattern("hh:mm a");
                    System.out.println(timePicker1.getSelectedTime());
                }
            }
        });
        
        timePicker2.addTimeSelectionListener(new TimeSelectionListener() {
            @Override
            public void timeSelected(TimeEvent te) {
                if (timePicker2.isTimeSelected()) {
                    DateTimeFormatter df = DateTimeFormatter.ofPattern("hh:mm a");
                    System.out.println(timePicker2.getSelectedTime());
                }
            }
        });
        
        tblScheduler.getColumnModel().getColumn(0).setCellRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                if (row % 2 == 0) {
                    // For every other row, set the value to the hour and span two cells vertically
                    setPreferredSize(new Dimension(getPreferredSize().width, 60));
                } else {
                    // For the remaining rows, make the cell empty and invisible
                    setText("");
                    setPreferredSize(new Dimension(getPreferredSize().width, 0));
                }
                return this;
            }
        });
        
        

        
        ListSelectionModel cellSelectionModel = tblScheduler.getSelectionModel();
        cellSelectionModel.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        cellSelectionModel.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                if (e.getValueIsAdjusting()) {
                  return;
                }
                clear();
                try {
                    int[] selectedRow = tblScheduler.getSelectedRows();
                    int[] selectedColumns = tblScheduler.getSelectedColumns();



                    if (selectedColumns.length > 1)
                    {   
                        MessageAlerts.getInstance().showMessage("Choose only one", "You can only chosse one soccer field", MessageAlerts.MessageType.WARNING, MessageAlerts.CLOSED_OPTION, new PopupCallbackAction() {
                                    @Override
                                    public void action(PopupController pc, int i) {
                                        if (i == MessageAlerts.CLOSED_OPTION )
                                        {

                                        }
                                    }
                                });
                       





                        return;
                    }
                    String dataShow = "";
                    Boolean isBooked = false;
                    if (isMoreOneSelected(selectedRow, selectedColumns[0]))
                    {
                        
                        MessageAlerts.getInstance().showMessage("Choose only one", "You cannot choose both these areas", MessageAlerts.MessageType.WARNING, MessageAlerts.CLOSED_OPTION, new PopupCallbackAction() {
                                    @Override
                                    public void action(PopupController pc, int i) {
                                        if (i == MessageAlerts.CLOSED_OPTION )
                                        {

                                        }
                                    }
                                });
                    }
                    Boolean isBookedSelect = false;
                    for (int j = 0; j < selectedRow.length; j++)
                    {
                        if (data[selectedRow[j]][selectedColumns[0]] != null )
                        {   
                            isBookedSelect = true;   
                            break;

                        }
                    }
                    if (isBookedSelect)
                    {   

                        Booking bg = booked[selectedRow[0]][selectedColumns[0]];
                        lblId.setText("#" + bg.getId());
                                
                        Customer cus = new Customer();
                        if (bg != null)
                        {
                            cus = customerService.findById(bg.getCustomerId());
                        }

                        if (cus != null )
                        {
                            String notify = "ID: " + bg.getId() + "\nCustomer: " +  cus.getName() + "\nPhone: " + cus.getPhoneNumber();
                            Notifications.getInstance().show(Notifications.Type.INFO, notify);
                            taNote.setText(bg.getNote());
                            txtSearch.setText(cus.getPhoneNumber());
                            tfName.setText(cus.getName());
                            customer = cus;
                            tfStartTime.setValue(Utils.convertTimestampToLocalTime(bg.getTimeStart()));
                            tfEndTime.setValue(Utils.convertTimestampToLocalTime(bg.getTimeEnd()));
                            DecimalFormat df = new DecimalFormat("#,##0.##");
                            tfPrice.setText(df.format(bg.getPrice())+ " VND");
                            for (Field field : fields)
                            {
                                if (field.getId() == bg.getFieldId())
                                {
                                    fieldModels.setSelectedItem(field);
                                }
                            }
                            if (bg.getStatus().equals(StaticStrings.ACTIVE))
                            {
                                cbxStatus.setSelectedIndex(0);
                            }
                            else
                            {
                                cbxStatus.setSelectedIndex(1);
                            }
                        }
         
                        return;
                    }

                    if (selectedRow.length > 0) {
                        // Assuming timeSlots is a List of LocalTime ranges
                        LocalTime startTime = timeSlots.get(selectedRow[0]);
                        LocalTime endTime = timeSlots.get(selectedRow[selectedRow.length - 1]).plusMinutes(30);

                        // Convert LocalTime to String
                        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");
                        String formattedStartTime = startTime.format(formatter);
                        String formattedEndTime = endTime.format(formatter);

                        // Set the start and end times in the text fields
                        tfStartTime.setText(formattedStartTime);
                        tfEndTime.setText(formattedEndTime);

                        java.sql.Time sTime = java.sql.Time.valueOf(startTime);
                        java.sql.Time eTime = java.sql.Time.valueOf(endTime);
                        String dayOfWeekStr;
                        Calendar calendar = Calendar.getInstance();
                        calendar.setTime(dateSelected);
                        int dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK);
                        switch (dayOfWeek) {
                            case Calendar.MONDAY:
                                dayOfWeekStr = "Monday";
                                break;
                            case Calendar.TUESDAY:
                                dayOfWeekStr = "Tuesday";
                                break;
                            case Calendar.WEDNESDAY:
                                dayOfWeekStr = "Wednesday";
                                break;
                            case Calendar.THURSDAY:
                                dayOfWeekStr = "Thursday";
                                break;
                            case Calendar.FRIDAY:
                                dayOfWeekStr = "Friday";
                                break;
                            case Calendar.SATURDAY:
                                dayOfWeekStr = "Saturday";
                                break;
                            case Calendar.SUNDAY:
                                dayOfWeekStr = "Sunday";
                                break;
                            default:
                                dayOfWeekStr = "";
                                break;
                        }
                        DecimalFormat df = new DecimalFormat("#,##0.##");
                        BigDecimal priceBigDecimal = new BigDecimal(String.valueOf(priceListService.findPriceByTime(sTime, eTime, dayOfWeekStr, fields.get(selectedColumns[0]-1).getType())));
                        tfPrice.setText(df.format(priceBigDecimal)+ " VND");

                        Duration duration = Duration.between(startTime, endTime);
                        long hours = duration.toHours();
                        long minutes = duration.toMinutes() % 60;
                        lblDuration.setText(hours + "h" + ":" + minutes + "m");
                        fieldModels.setSelectedItem(fields.get(selectedColumns[0]-1));
                        
                        cbxTypeField.setSelectedItem(fields.get(selectedColumns[0]-1).getType());
                }
            } 
                catch(Exception ex)
                {
                    
                }
            }
            
        
           
        });


              
        
    }
    
    private void setTimePicker() {
        timePicker1 = new  TimePicker();
        timePicker1.set24HourView(true);
        timePicker1.setOrientation(SwingConstants.HORIZONTAL);
        
        
        timePicker2 = new  TimePicker();
        timePicker2.set24HourView(true);
        timePicker2.setOrientation(SwingConstants.HORIZONTAL);
        
        
        timePicker1.setEditor(tfStartTime);
        timePicker2.setEditor(tfEndTime);
    }
    private raven.datetime.component.time.TimePicker timePicker1, timePicker2;

    private void loadData() {
        
        bookingService = new BookingServiceImpl();
        customerService = new CustomerServiceImpl();
        listBooking = new ArrayList<>();
        fields = new ArrayList<>();
        txtSearch.putClientProperty(FlatClientProperties.TEXT_FIELD_TRAILING_ICON, new FlatSVGIcon("minisoccerfieldmanagement/drawer/icon/search.svg", 0.35f));
        btnCheckin.setIcon(new FlatSVGIcon("minisoccerfieldmanagement/drawer/icon/add.svg", 0.35f));
        btnSave.setIcon(new FlatSVGIcon("minisoccerfieldmanagement/drawer/icon/edit.svg", 0.35f));
        btnDelete.setIcon(new FlatSVGIcon("minisoccerfieldmanagement/drawer/icon/delete.svg", 0.35f));
        fieldService = new FieldServiceImpl();
        fields = fieldService.findAll();
        fieldModels = new DefaultComboBoxModel();
        fieldModels.addAll(fields);
        cbxFields1.setModel(fieldModels);
        
        tfDate.setValue(Date.from(LocalDate.now().atStartOfDay(ZoneId.systemDefault()).toInstant()));
        dateSelected =  Date.from(LocalDate.now().atStartOfDay(ZoneId.systemDefault()).toInstant());
        
        timeSlots = new ArrayList<>();
        LocalTime start = LocalTime.of(6, 0);
        LocalTime end = LocalTime.of(22, 30);
        while (!start.isAfter(end)) {
            timeSlots.add(start);
            start = start.plus(30, ChronoUnit.MINUTES);
        }
        
        // Create column names
        columnNames = new String[fields.size()+1];
        columnNames[0] = "Time Slot";
        for (int i = 1; i <= fields.size(); i++) {
            columnNames[i] = fields.get(i-1).getName();
        }
        setTimePicker();
        
        priceListService  = new PriceListServiceImpl();
        listBooking = bookingService.findByDate(new java.sql.Date(dateSelected.getTime()));
    }

    private void save() {
        if (true)
        {   
            try {
              String phoneNumber = txtSearch.getText();
              String customerName = tfName.getText();
              String note = taNote.getText();
              String priceString = tfPrice.getText();
              priceString = priceString.trim().replace(",", "").replace(" VND","");
              
              BigDecimal price = new BigDecimal(priceString);
              
              if (phoneNumber.isEmpty() || phoneNumber.length() != 10)
              {
                    MessageAlerts.getInstance().showMessage("Phone is required", "Please enter customer phone", MessageAlerts.MessageType.WARNING, MessageAlerts.CLOSED_OPTION, new PopupCallbackAction() {
                                @Override
                                public void action(PopupController pc, int i) {
                                    if (i == MessageAlerts.CLOSED_OPTION )
                                    {

                                    }
                                }
                            });
                    return;
              }
              if (customerName.isEmpty())
              {
                customer = new Customer();
                
                IMemberShipService memberShipService = new MemberShipServiceImpl();
                MemberShip membership = memberShipService.findBySpendAmount(BigDecimal.ZERO);
                customer.setName("New Customer");
                customer.setPhoneNumber(phoneNumber);
                customer.setMemberShipId(membership.getId());
              }
              Booking newBooking = new Booking();
              Field fiedBooking = (Field)fieldModels.getSelectedItem();
              newBooking.setFieldId(fiedBooking.getId());
              newBooking.setNote(note);
              newBooking.setPrice(price);
              
              LocalDate dateBooking = ((Date)tfDate.getValue()).toInstant().atZone(ZoneId.systemDefault()).toLocalDate();;
              String ts = String.valueOf(tfStartTime.getValue());
              String te = String.valueOf(tfEndTime.getValue());
              
              LocalDateTime dateTimeBooking = dateBooking.atTime(Integer.parseInt(ts.substring(0, 2)), Integer.parseInt(ts.substring(3, 5)));
              LocalDateTime dateTimeEndBooking = dateBooking.atTime(Integer.parseInt(te.substring(0, 2)), Integer.parseInt(te.substring(3, 5)));
              Timestamp startBooking = Timestamp.valueOf(dateTimeBooking);
              Timestamp endBooking = Timestamp.valueOf(dateTimeEndBooking);
              
              newBooking.setTimeStart(startBooking);
              newBooking.setTimeEnd(endBooking);
              newBooking.setUserId(user.getId());
              newBooking.setStatus(StaticStrings.ACTIVE);
              
           
            if (tfName.getText().isEmpty())
            {   String input = JOptionPane.showInputDialog(null, "Enter customer name", "Add Name", JOptionPane.QUESTION_MESSAGE);

                // input sẽ chứa giá trị mà người dùng nhập vào. Nếu người dùng nhấn Cancel, input sẽ là null.
                if (input != null && input.isBlank() == false) {
                    customer.setName(input);
                } 
               
                if (customerService.add(customer)){
                    Notifications.getInstance().show(Notifications.Type.SUCCESS, Notifications.Location.TOP_CENTER, "New customer has been added");
                    customer = customerService.findByPhoneNumber(phoneNumber);
                }
                else
                {
                    MessageAlerts.getInstance().showMessage("Add Customer Failed", "Please check the information about customer", MessageAlerts.MessageType.WARNING, MessageAlerts.CLOSED_OPTION, new PopupCallbackAction() {
                                @Override
                                public void action(PopupController pc, int i) {
                                    if (i == MessageAlerts.CLOSED_OPTION )
                                    {

                                    }
                                }
                            });
                    return;
                }

            }
            
            newBooking.setCustomerId(customer.getId());
            
            if (bookingService.add(newBooking))
                MessageAlerts.getInstance().showMessage("Success", "Booking has been saved", MessageAlerts.MessageType.WARNING, MessageAlerts.CLOSED_OPTION, new PopupCallbackAction() {
                                @Override
                                public void action(PopupController pc, int i) {
                                    if (i == MessageAlerts.CLOSED_OPTION )
                                    {

                                    }
                                }
                            });
                            
            } 
            catch (Exception e) {
                e.printStackTrace();
                MessageAlerts.getInstance().showMessage("Save error", "Please check the information again", MessageAlerts.MessageType.WARNING, MessageAlerts.CLOSED_OPTION, new PopupCallbackAction() {
                                @Override
                                public void action(PopupController pc, int i) {
                                    if (i == MessageAlerts.CLOSED_OPTION )
                                    {

                                    }
                                }
                            });
                
            }
            
            
        }
        else
        {
            try {
                
              
                
                
            } catch (Exception e) {
                MessageAlerts.getInstance().showMessage("Save Error", "Please check the information again", MessageAlerts.MessageType.WARNING, MessageAlerts.CLOSED_OPTION, new PopupCallbackAction() {
                                @Override
                                public void action(PopupController pc, int i) {
                                    if (i == MessageAlerts.CLOSED_OPTION )
                                    {

                                    }
                                }
                            });
            }
        }
           
        listBooking = bookingService.findByDateAndFieldType(Utils.convertUtilDateToSqlDate(dateSelected), "");
        setScheduler(dateSelected);
        
    }
    private int getCol(int fieldId) {
        if (fields == null) return -1;
        for (int i = 0; i < fields.size(); i++) {
            if (fields.get(i).getId() == fieldId) {
                return i + 1;
            }
        }
         return -1;
     }

    private int getRow(LocalTime timeSlot) {
         if (timeSlots == null) return -1;
         for (int i = 0; i < timeSlots.size(); i++) {
             if (timeSlots.get(i).equals(timeSlot)) {
                 return i;
             }
         }
         return -1; // Trả về -1 nếu không tìm thấy timeSlot
    }
    
    private Boolean isMoreOneSelected(int[] row, int col)
    {
        int size = row.length;
        if (size == 1 || size == 0) return false;
        for (int i = 0; i< size -1; i++)
        {
            if (data[row[i]][col] == null && data[row[i+1]][col] != null)
                return true;
            
            if (data[row[i]][col] != null && data[row[i+1]][col] == null)
                return true;
        }
        return false;
    }

    private void clear() {
        tfName.setText("");
        tfPrice.setText("");
        txtSearch.setText("");
        tfEndTime.setValue(null);
        tfStartTime.setValue(null);
        tfDate.setValue(dateSelected);
        taNote.setText("");
        cbxStatus.setSelectedIndex(0);
        cbxFields1.setSelectedIndex(0);
        cbxTypeField.setSelectedIndex(0);
        lblId.setText("");
    }

    private void delete() {
        String id = lblId.getText();
        try {
            if (id.isEmpty())
            {
                throw new Exception("Id not found");
            }
            else 
            {
       
                MessageAlerts.getInstance().showMessage("DELETE", "Field booking with id " + id + " will be deleted", MessageAlerts.MessageType.WARNING, MessageAlerts.OK_CANCEL_OPTION, new PopupCallbackAction() {
                                @Override
                                public void action(PopupController pc, int i) {
                                    if (i == MessageAlerts.OK_OPTION)
                                    {
                                        String idnew = id.replace("#", "");
                                        int idInt = Integer.parseInt(idnew);
                                        if ( bookingService.softDelete(idInt))
                                        {
                                            listBooking = bookingService.findByDate(Utils.convertUtilDateToSqlDate(dateSelected));
                                            setScheduler(dateSelected);
                                            MessageAlerts.getInstance().showMessage("Delete Success", "", MessageAlerts.MessageType.SUCCESS, MessageAlerts.CLOSED_OPTION, new PopupCallbackAction() {
                                                        @Override
                                                        public void action(PopupController pc, int i) {
                                                            if (i == MessageAlerts.CLOSED_OPTION )
                                                            {

                                                            }
                                                        }
                                                    });

                                        }
                                        else{
                                            try {
                                                throw new Exception("These was an error during detection");
                                            } catch (Exception ex) {
                                                Logger.getLogger(StaffBooking.class.getName()).log(Level.SEVERE, null, ex);
                                            }
                                        }
                                    }
                                }
                            });
            
                
                
            }
            
        }
        catch (Exception e){
            MessageAlerts.getInstance().showMessage("Delete Error", e.getMessage(), MessageAlerts.MessageType.ERROR, MessageAlerts.CLOSED_OPTION, new PopupCallbackAction() {
                                @Override
                                public void action(PopupController pc, int i) {
                                    if (i == MessageAlerts.CLOSED_OPTION )
                                    {

                                    }
                                }
                            });
        }
    }


}
