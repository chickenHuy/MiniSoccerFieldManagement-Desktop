/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package minisoccerfieldmanagement.panel.statistics;

import com.formdev.flatlaf.FlatClientProperties;
import com.formdev.flatlaf.extras.FlatSVGIcon;
import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import org.apache.poi.ss.usermodel.Font;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Random;
import java.util.Set;
import java.util.TreeSet;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import minisoccerfieldmanagement.dao.ChartDAOImpl;
import minisoccerfieldmanagement.dao.IChartDAO;
import minisoccerfieldmanagement.model.IncomeChart;
import minisoccerfieldmanagement.util.DateCalculator;
import minisoccerfieldmanagement.util.StaticStrings;
import net.miginfocom.swing.MigLayout;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import raven.alerts.MessageAlerts;
import raven.chart.ChartLegendRenderer;
import raven.chart.data.category.DefaultCategoryDataset;
import raven.chart.line.LineChart;
import raven.crazypanel.CrazyPanel;
import raven.popup.component.PopupController;

/**
 *
 * @author trank
 */
public class IncomeStatistics extends CrazyPanel {

    IChartDAO chartDAO;

    public IncomeStatistics() {
        initComponents();
        setComponentZOrder(btnPrint, 0);
        chartDAO = new ChartDAOImpl();
        lineChart.startAnimation();
        createLineChart();
        btnPrint.setIcon(new FlatSVGIcon("minisoccerfieldmanagement/drawer/icon/excel.svg", 0.35f));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lineChart = new raven.chart.line.LineChart();
        btnPrint = new com.formdev.flatlaf.extras.components.FlatButton();

        setFlatLafStyleComponent(new raven.crazypanel.FlatLafStyleComponent(
            "background:$Table.background;[light]border:0,0,0,0,shade(@background,5%),,20;[dark]border:0,0,0,0,tint(@background,5%),,20",
            null
        ));
        setPreferredSize(new java.awt.Dimension(980, 220));
        setLayout(null);
        add(lineChart);
        lineChart.setBounds(6, 6, 1140, 185);

        btnPrint.setText("Print");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });
        add(btnPrint);
        btnPrint.setBounds(1050, 10, 90, 23);
    }// </editor-fold>//GEN-END:initComponents

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Excel Files (*.xlsx)", "xlsx");
        fileChooser.setFileFilter(filter);
        int userSelection = fileChooser.showSaveDialog(this);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            String filePath = fileToSave.getAbsolutePath();
            if (!filePath.toLowerCase().endsWith(".xlsx")) {
                filePath += ".xlsx";
            }
            exportChartDataToExcel(filePath);
        }
    }//GEN-LAST:event_btnPrintActionPerformed

    private void exportChartDataToExcel(String filePath) {
        try {
            Workbook workbook = new XSSFWorkbook();
            Sheet sheet = workbook.createSheet("Data");

            Row headerRow = sheet.createRow(0);
            Cell headerCell = headerRow.createCell(0);
            headerCell.setCellValue("Income Statistics");

            CellStyle headerCellStyle = workbook.createCellStyle();
            Font headerFont = workbook.createFont();
            headerFont.setBold(true);
            headerFont.setFontHeightInPoints((short) 11);
            headerCellStyle.setFont(headerFont);
            headerCellStyle.setAlignment(HorizontalAlignment.CENTER);
            headerCell.setCellStyle(headerCellStyle);

            sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, 3));

            Row columnHeadersRow = sheet.createRow(1);
            String[] headers = {"Date", "Final Income", "Field Income", "Service Income"};
            for (int i = 0; i < headers.length; i++) {
                Cell cell = columnHeadersRow.createCell(i);
                cell.setCellValue(headers[i]);
            }

            CellStyle leftAlignCellStyle = workbook.createCellStyle();
            leftAlignCellStyle.setAlignment(HorizontalAlignment.LEFT);

            DefaultCategoryDataset<String, String> dataset = (DefaultCategoryDataset<String, String>) lineChart.getCategoryDataset();
            SimpleDateFormat df = new SimpleDateFormat("MMM dd, yyyy");
            int rowNum = 2;

            for (int i = 0; i < dataset.getColumnCount(); i++) {
                Row row = sheet.createRow(rowNum++);
                String date = dataset.getColumnKey(i);

                Cell dateCell = row.createCell(0);
                dateCell.setCellValue(date);
                dateCell.setCellStyle(leftAlignCellStyle);

                Cell finalIncomeCell = row.createCell(1);
                finalIncomeCell.setCellValue(dataset.getValue("Final Income", date).doubleValue());
                finalIncomeCell.setCellStyle(leftAlignCellStyle);

                Cell fieldIncomeCell = row.createCell(2);
                fieldIncomeCell.setCellValue(dataset.getValue("Field Income", date).doubleValue());
                fieldIncomeCell.setCellStyle(leftAlignCellStyle);

                Cell serviceIncomeCell = row.createCell(3);
                serviceIncomeCell.setCellValue(dataset.getValue("Service Income", date).doubleValue());
                serviceIncomeCell.setCellStyle(leftAlignCellStyle);
            }

            for (int i = 0; i < headers.length; i++) {
                sheet.autoSizeColumn(i);
            }

            try (FileOutputStream fileOut = new FileOutputStream(filePath)) {
                workbook.write(fileOut);
                workbook.close();

                MessageAlerts.getInstance().showMessage("Save successful", "Data exported to Excel", MessageAlerts.MessageType.SUCCESS, MessageAlerts.CLOSED_OPTION, (PopupController pc, int i) -> {
                    if (i == MessageAlerts.CLOSED_OPTION) {

                    }
                });

                if (Desktop.isDesktopSupported()) {
                    Desktop.getDesktop().open(new File(filePath));
                }
            }
        } catch (IOException ex) {
            MessageAlerts.getInstance().showMessage("Save failed", "Error exporting data to Excel", MessageAlerts.MessageType.ERROR, MessageAlerts.CLOSED_OPTION, (PopupController pc, int i) -> {
                if (i == MessageAlerts.CLOSED_OPTION) {

                }
            });
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.formdev.flatlaf.extras.components.FlatButton btnPrint;
    private raven.chart.line.LineChart lineChart;
    // End of variables declaration//GEN-END:variables

    private void createLineChart() {
        lineChart.setChartType(LineChart.ChartType.CURVE);
        lineChart.putClientProperty(FlatClientProperties.STYLE, ""
                + "border:5,5,5,5,$Component.borderColor,,20");
        lineChart.setValuesFormat(new DecimalFormat("#,##0.##"));
        createLineChartData();
    }

    private void createLineChartData() {

        List<IncomeChart> finalIncome = chartDAO.getIncomeChart(StaticStrings.FINAL_AMOUNT);
        List<IncomeChart> fieldIncome = chartDAO.getIncomeChart(StaticStrings.FIELD_AMOUNT);
        List<IncomeChart> serviceIncome = chartDAO.getIncomeChart(StaticStrings.SERVICE_AMOUNT);

        List<java.sql.Date> dates = new ArrayList<java.sql.Date>();
        for (IncomeChart incomeChart : fieldIncome) {
            if (!dates.contains(incomeChart.getDate())) {
                dates.add(incomeChart.getDate());
            }
        }
        for (IncomeChart incomeChart : finalIncome) {
            if (!dates.contains(incomeChart.getDate())) {
                dates.add(incomeChart.getDate());
            }
        }
        for (IncomeChart incomeChart : serviceIncome) {
            if (!dates.contains(incomeChart.getDate())) {
                dates.add(incomeChart.getDate());
            }
        }
        Set<java.sql.Date> uniqueDates = new TreeSet<>(dates);
        dates = new ArrayList<>(uniqueDates);

        double[][] incomes = new double[3][dates.size()];
        for (IncomeChart incomeChart : fieldIncome) {
            for (int i = 0; i < dates.size(); i++) {
                if (dates.get(i).equals(incomeChart.getDate())) {
                    incomes[1][i] = incomeChart.getIncome().doubleValue();
                }
            }
        }
        for (IncomeChart incomeChart : finalIncome) {
            for (int i = 0; i < dates.size(); i++) {
                if (dates.get(i).equals(incomeChart.getDate())) {
                    incomes[0][i] = incomeChart.getIncome().doubleValue();
                }
            }
        }
        for (IncomeChart incomeChart : serviceIncome) {
            for (int i = 0; i < dates.size(); i++) {
                if (dates.get(i).equals(incomeChart.getDate())) {
                    incomes[2][i] = incomeChart.getIncome().doubleValue();
                }
            }
        }

        DefaultCategoryDataset<String, String> categoryDataset = new DefaultCategoryDataset<>();
        SimpleDateFormat df = new SimpleDateFormat("MMM dd, yyyy");
        for (int i = 0; i < dates.size(); i++) {
            String date = df.format(dates.get(i));
            categoryDataset.addValue(incomes[0][i], "Final Income", date);
            categoryDataset.addValue(incomes[1][i], "Field Income", date);
            categoryDataset.addValue(incomes[2][i], "Service Income", date);
        }

        /**
         * Control the legend we do not show all legend
         */
        try {
            Date date = df.parse(categoryDataset.getColumnKey(0));
            Date dateEnd = df.parse(categoryDataset.getColumnKey(categoryDataset.getColumnCount() - 1));

            DateCalculator dcal = new DateCalculator(date, dateEnd);
            long diff = dcal.getDifferenceDays();

            double d = Math.ceil((diff / 10f));
            lineChart.setLegendRenderer(new ChartLegendRenderer() {
                @Override
                public Component getLegendComponent(Object legend, int index) {
                    if (index % d == 0) {
                        return super.getLegendComponent(legend, index);
                    } else {
                        return null;
                    }
                }
            });
        } catch (ParseException e) {
            System.err.println(e);
        }

        lineChart.setCategoryDataset(categoryDataset);
        lineChart.getChartColor().addColor(Color.decode("#38bdf8"), Color.decode("#fb7185"), Color.decode("#34d399"));
        JLabel header = new JLabel("Income Data (VND)");
        header.putClientProperty(FlatClientProperties.STYLE, ""
                + "font:+1;"
                + "border:0,0,5,0");
        lineChart.setHeader(header);
    }

}
